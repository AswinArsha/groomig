// src/components/BookingForm.jsx
import React, { useState, useEffect } from "react";
import { supabase } from "../../supabase";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import toast from "react-hot-toast";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { CalendarIcon, Loader2, AlertCircle } from "lucide-react";

export default function BookingForm({ booking, onSave, onCancel ,onSuccess }) {
  // Determine if we are editing an existing booking
  const isEditing = Boolean(booking);

  // State variables
  const [customerName, setCustomerName] = useState(booking?.customer_name || "");
  const [contactNumber, setContactNumber] = useState(booking?.contact_number || "");
  const [dogName, setDogName] = useState(booking?.dog_name || "");
  const [dogBreed, setDogBreed] = useState(booking?.dog_breed || "");
  const [dogSize, setDogSize] = useState(booking?.dog_size || "");
  
  // Initialize bookingDate: if editing, use booking_date, else null
  const initialDate = booking?.booking_date ? new Date(booking.booking_date) : null;
  const [bookingDate, setBookingDate] = useState(initialDate);
  
  const [availableSlots, setAvailableSlots] = useState([]);
  const [selectedSlot, setSelectedSlot] = useState(booking?.time_slot_id || "");
  const [loadingSlots, setLoadingSlots] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    if (bookingDate) {
      fetchAvailableSlots();
    }
  }, [bookingDate]);

  async function fetchAvailableSlots() {
    if (!bookingDate) return;
  
    setLoadingSlots(true);
  
    const formattedDate = format(bookingDate, "yyyy-MM-dd");
  
    // Fetch all time slots
    const { data: allSlots, error: slotsError } = await supabase
      .from("time_slots")
      .select("*");
  
    if (slotsError) {
      toast.error(`Error fetching slots: ${slotsError.message}`);
      setLoadingSlots(false);
      return;
    }
  
    // Fetch bookings for the selected date
    const { data: bookingsOnDate, error: bookingsError } = await supabase
      .from("bookings")
      .select("time_slot_id")
      .eq("booking_date", formattedDate);
  
    if (bookingsError) {
      toast.error(`Error fetching bookings: ${bookingsError.message}`);
      setLoadingSlots(false);
      return;
    }
  
    const bookedSlotIds = bookingsOnDate.map((booking) => booking.time_slot_id);
    const available = allSlots.filter(
      (slot) => !bookedSlotIds.includes(slot.id)
    );
  
    setAvailableSlots(available);
    setLoadingSlots(false);
  }
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
  
    const formattedDate = bookingDate ? format(bookingDate, "yyyy-MM-dd") : null;
  
    if (isEditing) {
      // ... existing update logic
    } else {
      // For new booking creation, first fetch the time slot details
      let slotTime = null;
      if (selectedSlot) {
        const { data: timeSlotData, error: timeSlotError } = await supabase
          .from('time_slots')
          .select('start_time')
          .eq('id', selectedSlot)
          .single();
  
        if (timeSlotError) {
          toast.error(`Error fetching time slot: ${timeSlotError.message}`);
          setSubmitting(false);
          return;
        }
        slotTime = timeSlotData.start_time;
      }
  
      // Insert new booking with slot_time
      const { error } = await supabase.from("bookings").insert([
        {
          customer_name: customerName,
          contact_number: contactNumber,
          dog_name: dogName,
          dog_breed: dogBreed,
          dog_size: dogSize,
          booking_date: formattedDate,
          time_slot_id: selectedSlot,
          slot_time: slotTime,  // Store the time directly in the booking
        },
      ]);
  
      setSubmitting(false);
  
      if (error) {
        toast.error(`Error creating booking: ${error.message}`);
      } else {
        toast.success("Booking created successfully!");
        // Clear form fields
        setCustomerName("");
        setContactNumber("");
        setDogName("");
        setDogBreed("");
        setDogSize("");
        setBookingDate(null);
        setSelectedSlot("");
        if (onSave) onSave();
      }
    }
  };
  

  return (
    <Card>
      <CardHeader>
        <CardTitle>{isEditing ? "Edit Booking" : "New Booking"}</CardTitle>
        <CardDescription>
          {isEditing
            ? "Update your dog grooming appointment details"
            : "Schedule a new dog grooming appointment"}
        </CardDescription>
      </CardHeader>
      <form onSubmit={handleSubmit}>
        <CardContent className="space-y-4">
          {/* Customer and dog details fields */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="customerName">Customer Name</Label>
              <Input
                id="customerName"
                value={customerName}
                onChange={(e) => setCustomerName(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="contactNumber">Contact Number</Label>
              <Input
                id="contactNumber"
                value={contactNumber}
                onChange={(e) => setContactNumber(e.target.value)}
                required
              />
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="dogName">Dog Name</Label>
              <Input
                id="dogName"
                value={dogName}
                onChange={(e) => setDogName(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="dogBreed">Dog Breed</Label>
              <Input
                id="dogBreed"
                value={dogBreed}
                onChange={(e) => setDogBreed(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="dogSize">Dog Size</Label>
              <Select value={dogSize} onValueChange={setDogSize} required>
                <SelectTrigger>
                  <SelectValue placeholder="Select size" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="small">Small</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="large">Large</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <div className="space-y-2">
            <Label>Booking Date</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant={"outline"}
                  className={cn(
                    "w-full justify-start text-left font-normal",
                    !bookingDate && "text-muted-foreground"
                  )}
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {bookingDate
                    ? format(bookingDate, "PPP")
                    : <span>Pick a date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={bookingDate}
                  onSelect={setBookingDate}
                  initialFocus
                />
              </PopoverContent>
            </Popover>
          </div>
          {bookingDate && (
            <div className="space-y-4">
              <Label className="text-lg font-semibold">Select Time Slot</Label>
              {loadingSlots ? (
                <div className="flex items-center justify-center h-32 bg-gray-100 rounded-lg">
                  <Loader2 className="h-6 w-6 animate-spin text-primary" />
                  <span className="ml-2 text-sm text-gray-600">
                    Loading available slots...
                  </span>
                </div>
              ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                  {availableSlots.length === 0 ? (
                    <div className="col-span-full p-6 bg-yellow-50 border border-yellow-300 rounded-lg">
                      <p className="text-yellow-800 font-semibold text-center flex items-center justify-center space-x-3">
                        <AlertCircle className="h-6 w-6 text-yellow-700" />
                        <span>No available slots for this date.</span>
                      </p>
                    </div>
                  ) : (
                    availableSlots.map((slot) => (
                      <button
                        key={slot.id}
                        type="button"
                        onClick={() => setSelectedSlot(slot.id)}
                        className={`p-4 h-24 rounded-lg border transition-all duration-300 ease-in-out transform ${
                          selectedSlot === slot.id
                            ? "bg-green-500 text-white scale-105 shadow-lg shadow-green-300 border-transparent"
                            : "bg-white text-gray-800 hover:bg-gray-100"
                        } ${
                          selectedSlot === slot.id
                            ? "border-2 border-green-500"
                            : "border border-gray-300"
                        }`}
                      >
                        <p className="font-semibold text-lg">
                          {slot.start_time.split(":").slice(0, 2).join(":")}
                        </p>
                      </button>
                    ))
                  )}
                </div>
              )}
            </div>
          )}
        </CardContent>
        <CardFooter>
          <Button type="submit" className="w-full" disabled={submitting}>
            {submitting ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                {isEditing ? "Updating Booking..." : "Creating Booking..."}
              </>
            ) : (
              isEditing ? "Save Changes" : "Create Booking"
            )}
          </Button>
        </CardFooter>
      </form>
    </Card>
  );
}
,
// src/components/Bookings/AddTimeSlotForm.jsx
import React, { useState } from "react";
import { supabase } from "../../supabase";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Checkbox } from "@/components/ui/checkbox";
import { Card, CardContent, CardDescription, CardHeader } from "@/components/ui/card";
import toast from 'react-hot-toast';

const DAYS_OF_WEEK = [
  "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday",
];

export default function AddTimeSlotForm({ onSlotAdded }) {
  const [time, setTime] = useState("");
  const [repeatAllDays, setRepeatAllDays] = useState(true);
  const [selectedDays, setSelectedDays] = useState([]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    const { error } = await supabase.from("time_slots").insert([
      {
        start_time: time,  // Using start_time column as single time field
        repeat_all_days: repeatAllDays,
        specific_days: repeatAllDays ? null : selectedDays,
      },
    ]);

    if (error) {
      toast.error(`Error: ${error.message}`);
    } else {
      setTime("");
      setRepeatAllDays(true);
      setSelectedDays([]);
      onSlotAdded();
      toast.success('Time slot added successfully!');
    }
  };

  return (
    <Card className= "h-[24rem]">
      <CardHeader>
        <CardDescription>
          Set up a new time slot for your schedule
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <Label htmlFor="time">Time</Label>
            <Input
              id="time"
              type="time"
              value={time}
              onChange={(e) => setTime(e.target.value)}
              required
            />
          </div>
          <div className="flex items-center space-x-2">
            <Switch
              id="repeatAllDays"
              checked={repeatAllDays}
              onCheckedChange={setRepeatAllDays}
            />
            <Label htmlFor="repeatAllDays">Repeat on All Days</Label>
          </div>
          {!repeatAllDays && (
            <div className="space-y-2">
              <Label>Select Specific Days</Label>
              <div className="grid grid-cols-2 gap-2">
                {DAYS_OF_WEEK.map((day) => (
                  <div key={day} className="flex items-center space-x-2">
                    <Checkbox
                      id={day}
                      checked={selectedDays.includes(day)}
                      onCheckedChange={(checked) => {
                        setSelectedDays(
                          checked
                            ? [...selectedDays, day]
                            : selectedDays.filter((d) => d !== day)
                        );
                      }}
                    />
                    <Label htmlFor={day}>{day}</Label>
                  </div>
                ))}
              </div>
            </div>
          )}
          <Button type="submit" className="w-full">
            Add Time Slot
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}
,
import React, { useState, useEffect } from "react";
import { supabase } from "../../supabase";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardDescription } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Checkbox } from "@/components/ui/checkbox";
import { Loader2, Clock, Calendar, Trash2, Edit2 } from "lucide-react";
import toast, { Toaster } from "react-hot-toast";
import { ScrollArea } from "@/components/ui/scroll-area";

const DAYS_OF_WEEK = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday",
];

export default function TimeSlotList() {
  const [slots, setSlots] = useState([]);
  const [loading, setLoading] = useState(true);
  const [editingSlot, setEditingSlot] = useState(null);

  const fetchSlots = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from("time_slots")
      .select("*")
      .order("created_at", { ascending: false });

    if (error) {
      toast.error(`Error: ${error.message}`);
    } else {
      setSlots(data || []);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchSlots();

    // Real-time subscription
    const channel = supabase
      .channel("realtime:time_slots")
      .on(
        "postgres_changes",
        { event: "INSERT", schema: "public", table: "time_slots" },
        (payload) => {
       
          setSlots((prevSlots) => [payload.new, ...prevSlots]);
        }
      )
      .on(
        "postgres_changes",
        { event: "DELETE", schema: "public", table: "time_slots" },
        (payload) => {
  
          setSlots((prevSlots) => prevSlots.filter((slot) => slot.id !== payload.old.id));
        }
      )
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "time_slots" },
        (payload) => {
  
          setSlots((prevSlots) =>
            prevSlots.map((slot) =>
              slot.id === payload.new.id ? { ...slot, ...payload.new } : slot
            )
          );
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  const handleDelete = async (id) => {
    const { error } = await supabase.from("time_slots").delete().eq("id", id);
    if (error) {
      toast.error(`Error: ${error.message}`);
    } else {
      toast.success("Time slot deleted successfully!");
    }
  };

  const handleEdit = async (slot) => {
    const { error } = await supabase
      .from("time_slots")
      .update({
        start_time: slot.start_time,
        repeat_all_days: slot.repeat_all_days,
        specific_days: slot.specific_days,
      })
      .eq("id", slot.id);

    if (error) {
      toast.error(`Error: ${error.message}`);
    } else {
      toast.success("Time slot updated successfully!");
    }
    setEditingSlot(null);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <Card className="w-full max-w-3xl mx-auto">
      <CardHeader>
        <CardDescription>Existing Time Slots</CardDescription>
      </CardHeader>
      <CardContent className="-p-6">
        {slots.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-muted-foreground">No time slots found.</p>
            <p className="text-sm text-muted-foreground mt-2">Add a time slot to get started.</p>
          </div>
        ) : (
          <ScrollArea className="h-[19rem] p-4">
            <ul className="space-y-4">
              {slots.map((slot) => (
                <li key={slot.id} className="group">
                  <Card className="transition-shadow hover:shadow-md">
                    <CardContent className="p-4">
                      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                        <div className="space-y-2 flex-1">
                          <div className="flex items-center space-x-2">
                            <div className="bg-primary/10 p-2 rounded-full">
                              <Clock className="h-4 w-4 text-primary" />
                            </div>
                            <p className="font-medium text-lg">{slot.start_time.split(":").slice(0, 2).join(":")}</p>

                          </div>
                          <div className="flex items-start space-x-2">
                            <div className="bg-primary/10 p-2 rounded-full">
                              <Calendar className="h-4 w-4 text-primary" />
                            </div>
                            <p className="text-sm text-muted-foreground">
                              {slot.repeat_all_days
                                ? "Repeats on all days"
                                : `Specific days: ${slot.specific_days?.join(", ")}`}
                            </p>
                          </div>
                        </div>
                        <div className="flex gap-2 w-full sm:w-auto">
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button
                                className="flex-1 sm:flex-none"
                                size="sm"
                                variant="outline"
                                onClick={() => setEditingSlot(slot)}
                              >
                                 <Edit2 className="h-4 w-4 mr-2" />
                              
                              </Button>
                            </DialogTrigger>
                            <DialogContent className="sm:max-w-[425px]">
                              <DialogHeader>
                                <DialogTitle>Edit Time Slot</DialogTitle>
                              </DialogHeader>
                              {editingSlot && (
                                <EditTimeSlotForm
                                  slot={editingSlot}
                                  onSave={handleEdit}
                                  onCancel={() => setEditingSlot(null)}
                                />
                              )}
                            </DialogContent>
                          </Dialog>
                          <Button
                            className="flex-1 sm:flex-none"
                            size="sm"
                            variant="destructive"
                            onClick={() => handleDelete(slot.id)}
                          >
                            <Trash2 className="h-4 w-4 mr-2" />
                        
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </li>
              ))}
            </ul>
          </ScrollArea>
        )}
      </CardContent>
    
    </Card>
  );
}

function EditTimeSlotForm({ slot, onSave, onCancel }) {
  const [editedSlot, setEditedSlot] = useState(slot);

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(editedSlot);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 py-4">
      <div className="space-y-2">
        <Label htmlFor="time">Time</Label>
        <Input
          id="time"
          type="time"
          value={editedSlot.start_time}
          onChange={(e) =>
            setEditedSlot({ ...editedSlot, start_time: e.target.value })
          }
          required
          className="w-full"
        />
      </div>

      <div className="flex items-center space-x-2">
        <Switch
          id="repeatAllDays"
          checked={editedSlot.repeat_all_days}
          onCheckedChange={(checked) =>
            setEditedSlot({ ...editedSlot, repeat_all_days: checked })
          }
        />
        <Label htmlFor="repeatAllDays">Repeat on All Days</Label>
      </div>

      {!editedSlot.repeat_all_days && (
        <div className="space-y-3">
          <Label>Select Specific Days</Label>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
            {DAYS_OF_WEEK.map((day) => (
              <div
                key={day}
                className="flex items-center space-x-2 p-2 rounded-lg hover:bg-muted"
              >
                <Checkbox
                  id={day}
                  checked={editedSlot.specific_days?.includes(day)}
                  onCheckedChange={(checked) => {
                    const updatedDays = checked
                      ? [...(editedSlot.specific_days || []), day]
                      : editedSlot.specific_days?.filter((d) => d !== day) || [];
                    setEditedSlot({ ...editedSlot, specific_days: updatedDays });
                  }}
                />
                <Label htmlFor={day} className="flex-1 cursor-pointer">
                  {day}
                </Label>
              </div>
            ))}
          </div>
        </div>
      )}

      <div className="flex flex-col sm:flex-row justify-end gap-2">
        <Button type="submit" className="w-full sm:w-auto">
          Save Changes
        </Button>
      </div>
    </form>
  );
}
,
SUPABASE TABLE :
create table
  public.bookings (
    id uuid not null default extensions.uuid_generate_v4 (),
    customer_name text not null,
    contact_number text not null,
    dog_name text not null,
    dog_breed text not null,
    dog_size text not null,
    time_slot_id uuid null,
    booking_date date not null,
    created_at timestamp with time zone null default now(),
    slot_time time without time zone null,
    constraint bookings_pkey primary key (id),
    constraint bookings_time_slot_id_fkey foreign key (time_slot_id) references time_slots (id) on delete set null
  ) tablespace pg_default;
  ,
  create table
  public.time_slots (
    id uuid not null default extensions.uuid_generate_v4 (),
    start_time time without time zone not null,
    repeat_all_days boolean not null,
    specific_days text[] null,
    created_at timestamp with time zone null default now(),
    constraint time_slots_pkey primary key (id)
  ) tablespace pg_default;
i need some changes when booking , adding time slots and list.
, in the time slot , when adding time slot , it shows futher options like size (large and toy) ,label (optional), for example in a time slot , there a two slots one for large and other toy like this in the same time.
in the booking , first show the date input
